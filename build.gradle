buildscript {

    ext {
        springVersion = '4.2.3.RELEASE'
        springBootVersion = '1.3.1.RELEASE'
        aspectjVersion = '1.8.5'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven{url "https://maven.eveoh.nl/content/repositories/releases"}
        maven{url "http://repo.spring.io/libs-snapshot"}
        maven{url "http://repo.spring.io/libs-milestone"}
        maven{url "http://repo.spring.io/libs-release"}
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "nl.eveoh:gradle-aspectj:1.6"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'aspectj'
    apply plugin: 'signing'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    group = 'com.github.gjrwebber'
    version = '0.0.1-SNAPSHOT'
    description = 'Time travelling through a simulated world'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven{url "http://repo.spring.io/libs-snapshot"}
        maven{url "http://repo.spring.io/libs-milestone"}
        maven{url "http://repo.spring.io/libs-release"}
    }

    configurations {
        providedRuntime
    }

    dependencies {
        compile('org.gw:commons-aspects:1.0.0')
        compile('org.gw:object-logger:1.0.0')
        compile('org.reflections:reflections:0.9.9-RC1')
        compile('org.springframework:spring-aop:4.2.3.RELEASE')
        compile('org.slf4j:slf4j-simple:1.7.7')
        testCompile('junit:junit:4.11')
        testCompile('org.mockito:mockito-core:1.10.19')
        testCompile("org.springframework:spring-test:${springVersion}")
        aspectpath "org.springframework:spring-aspects:${springVersion}"
    }

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        sign configurations.archives
    }

    javadoc {
        failOnError = false
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.9'
    }


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
//            artifact javadocJar {
//                classifier "javadoc"
//            }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Spring Simulator'
                    packaging 'jar'
                    description 'Spring module for simulating a Sprig application with real world data collected from the application itself.'
                    url 'https://github.com/gjrwebber/spring-simulator'

                    scm {
                        connection 'scm:git:git@github.com:gjrwebber/spring-simulator.git'
                        developerConnection 'scm:git:git@github.com:gjrwebber/spring-simulator.git'
                        url 'git@github.com:gjrwebber/spring-simulator.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            comments '\n\t\t\tCopyright 2008-2013 the original author or authors.\n' +
                                    '\n' +
                                    '\t\t\tLicensed under the Apache License, Version 2.0 (the "License");\n' +
                                    '\t\t\tyou may not use this file except in compliance with the License.\n' +
                                    '\t\t\tYou may obtain a copy of the License at\n' +
                                    '\n' +
                                    '\t\t\t\t http://www.apache.org/licenses/LICENSE-2.0\n' +
                                    '\n' +
                                    '\t\t\tUnless required by applicable law or agreed to in writing, software\n' +
                                    '\t\t\tdistributed under the License is distributed on an "AS IS" BASIS,\n' +
                                    '\t\t\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n' +
                                    '\t\t\timplied.\n' +
                                    '\t\t\tSee the License for the specific language governing permissions and\n' +
                                    '\t\t\tlimitations under the License.\n\t\t'
                        }
                    }

                    developers {
                        developer {
                            id 'gjrwebber'
                            name 'Graham Webber'
                            email 'gjrwebber@gmail.com'
                        }
                    }
                }
            }
        }
    }

//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        from 'build/docs/javadoc'
//    }
//    task sourceJar(type: Jar) {
//        from sourceSets.main.allJava
//    }

}

project(':spring-simulator-sample') {

    apply plugin: 'spring-boot'

    dependencies {
        compile(project(':spring-simulator'))
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-aop")
//        compile("org.springframework:spring-boot:${springBootVersion}")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

